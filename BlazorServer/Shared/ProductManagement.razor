@page "/product-management"
@using BlazorServer.Data
@using System.Net.Http.Json
@using System.Text.Json;

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Product Management</h3>

@if (products != null && products.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Serial Number</th>
                <th>Amount</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Metal</th>
                <th>Purity</th>
                <th>Weight</th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Amount</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Metal</td>
                    <td>@product.Purity</td>
                    <td>@product.Weight</td>
                    <td><img src="@product.Image" alt="Product Image" /></td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditProduct(product)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No products found.</p>
}

<button class="btn btn-success" @onclick="ShowAddProductForm">Add Product</button>

@if (showAddProductForm)
{
    <h4>Add New Product</h4>

    <div class="form-group">
        <label for="amount">Amount</label>
        <input class="form-control" id="amount" @bind="@newProduct.Amount" />
    </div>

    <div class="form-group">
        <label for="productName">Product Name</label>
        <input class="form-control" id="productName" @bind="@newProduct.Name" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <input class="form-control" id="price" @bind="@newProduct.Price" />
    </div>

    <div class="form-group">
        <label for="metal">Metal</label>
        <input class="form-control" id="metal" @bind="@newProduct.Metal" />
    </div>

    <div class="form-group">
        <label for="purity">Purity</label>
        <input class="form-control" id="purity" @bind="@newProduct.Purity" />
    </div>

    <div class="form-group">
        <label for="weight">Weight</label>
        <input class="form-control" id="weight" @bind="@newProduct.Weight" />
    </div>

    <div class="form-group">
        <label for="image">Image URL</label>
        <input class="form-control" id="image" @bind="@newProduct.Image" />
    </div>

    <button class="btn btn-primary" @onclick="AddProduct">Save</button>
}

@if (editingProduct != null)
{
    <h4>Edit Product</h4>

    <div class="form-group">
        <label for="editAmount">Amount</label>
        <input class="form-control" id="editAmount" @bind="@editingProduct.Amount" />
    </div>

    <div class="form-group">
        <label for="editProductName">Product Name</label>
        <input class="form-control" id="editProductName" @bind="@editingProduct.Name" />
    </div>

    <div class="form-group">
        <label for="editPrice">Price</label>
        <input class="form-control" id="editPrice" @bind="@editingProduct.Price" />
    </div>

    <div class="form-group">
        <label for="editMetal">Metal</label>
        <input class="form-control" id="editMetal" @bind="@editingProduct.Metal" />
    </div>

    <div class="form-group">
        <label for="editPurity">Purity</label>
        <input class="form-control" id="editPurity" @bind="@editingProduct.Purity" />
    </div>

    <div class="form-group">
        <label for="editWeight">Weight</label>
        <input class="form-control" id="editWeight" @bind="@editingProduct.Weight" />
    </div>

    <div class="form-group">
        <label for="editImage">Image URL</label>
        <input class="form-control" id="editImage" @bind="@editingProduct.Image" />
    </div>

    <button class="btn btn-primary" @onclick="SaveProductChanges">Save Changes</button>
}

@code {
    private List<Product> products;
    private Product editingProduct;
    private Product newProduct = new Product();
    private bool showAddProductForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        HttpResponseMessage response = await httpClient.GetAsync("https://localhost:7134/api/Stock");

        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            products = JsonSerializer.Deserialize<List<Product>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            // Handle the error when retrieving products (e.g., display an error message)
        }
    }

    private void ShowAddProductForm()
    {
        showAddProductForm = true;
    }

    private async Task AddProduct()
    {
        HttpResponseMessage response = await httpClient.PostAsJsonAsync("https://localhost:7134/api/Stock", newProduct);

        if (response.IsSuccessStatusCode)
        {
            var createdProduct = await response.Content.ReadFromJsonAsync<Product>();
            if (createdProduct != null)
            {
                newProduct = new Product(); // Reset the new product form
                await LoadProducts(); // Reload the products
            }
            else
            {
                // Handle error
            }
        }
        else
        {
            // Handle error
        }
    }

    private void EditProduct(Product product)
    {
        editingProduct = new Product
            {
                Id = product.Id,
                Amount = product.Amount,
                Name = product.Name,
                Price = product.Price,
                Metal = product.Metal,
                Purity = product.Purity,
                Weight = product.Weight,
                Image = product.Image
            };
    }

    private async Task SaveProductChanges()
    {
        if (editingProduct != null)
        {
            // Update existing product
            HttpResponseMessage response = await httpClient.PutAsJsonAsync($"https://localhost:7134/api/Stock/{editingProduct.Id}", editingProduct);
            if (response.IsSuccessStatusCode)
            {
                await LoadProducts();
                editingProduct = null;
            }
            else
            {
                // Handle error
            }
        }
        else if (newProduct != null)
        {
            // Add new product
            HttpResponseMessage response = await httpClient.PostAsJsonAsync("https://localhost:7134/api/Stock", newProduct);
            if (response.IsSuccessStatusCode)
            {
                var createdProduct = await response.Content.ReadFromJsonAsync<Product>();
                if (createdProduct != null)
                {
                    products.Add(createdProduct); // Add the new product to the products list
                    newProduct = new Product(); // Reset the new product form
                    navigationManager.NavigateTo(navigationManager.Uri, true); // Refresh the page
                }
                else
                {
                    // Handle error
                }
            }
            else
            {
                // Handle error
            }
        }
    }
}
